// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.Gains;

/**
 *
 */
public class Drivetrain extends SubsystemBase {

	private WPI_TalonFX _left1 = new WPI_TalonFX(1);
	private WPI_TalonFX _left2 = new WPI_TalonFX(2);

	private WPI_TalonFX _right1 = new WPI_TalonFX(3);
	private WPI_TalonFX _right2 = new WPI_TalonFX(4);


	// Gains kGains_Turns = new Gains(0.07, 0.001, 2.2, 0.04, 200, 0.50);

	static public Gains kGains_Turns = new Gains(0.3, 0.002, 0.25, 0.1, 200, 0.50);


	static public Gains kGains_Distanc = new Gains(0.08, .001, 1.5, .04, 200, 0.50);
	static public Gains kGains_Secondary = new Gains(0.5, 0.0, 0.0, 0.0, 2000, 0.5);

	TalonFXInvertType _leftInvert = TalonFXInvertType.CounterClockwise; // Same as invert = "false"
	TalonFXInvertType _rightInvert = TalonFXInvertType.Clockwise; // Same as invert = "true"

	/** Config Objects for motor controllers */
	TalonFXConfiguration _leftConfig = new TalonFXConfiguration();
	TalonFXConfiguration _rightConfig = new TalonFXConfiguration();

	StringBuilder _talonString = new StringBuilder();

	/**
	*
	*/
	public Drivetrain() {

		// Stop any exess motion or motion magic if incorperated later
		_left1.set(ControlMode.PercentOutput, 0);
		_right1.set(ControlMode.PercentOutput, 0);

		/* Set Neutral Mode */
		_left1.setNeutralMode(NeutralMode.Brake);
		_right1.setNeutralMode(NeutralMode.Brake);

		// set to factory defaults
		_left1.configFactoryDefault();
		_left2.configFactoryDefault();

		_right1.configFactoryDefault();
		_right2.configFactoryDefault();

		// set up followers
		_left2.follow(_left1);
		_right2.follow(_right1);

		/* Configure the left Talon's selected sensor as local Integrated Sensor */
		_leftConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local
																													// Feedback
																													// Source

		/*
		 * Configure the Remote Talon's selected sensor as a remote sensor for the right
		 * Talon
		 */
		_rightConfig.remoteFilter0.remoteSensorDeviceID = _left1.getDeviceID(); // Device ID of Source
		_rightConfig.remoteFilter0.remoteSensorSource = RemoteSensorSource.TalonFX_SelectedSensor; // Remote Feedback
																									// Source

		/*
		 * Now that the Left sensor can be used by the master Talon,
		 * set up the Left (Aux) and Right (Master) distance into a single
		 * Robot distance as the Master's Selected Sensor 0.
		 */
		setRobotDistanceConfigs(_rightInvert, _rightConfig);

		/*
		 * Setup difference signal to be used for turn when performing Drive Straight
		 * with encoders
		 */
		setRobotTurnConfigs(_rightInvert, _rightConfig);

		/* Configure neutral deadband */
		_rightConfig.neutralDeadband = Constants.kNeutralDeadband;
		_leftConfig.neutralDeadband = Constants.kNeutralDeadband;

		/* Motion Magic Configurations */
		_rightConfig.motionAcceleration = 8000;
		_rightConfig.motionCruiseVelocity = 4000;

		/**
		 * Max out the peak output (for all modes).
		 * However you can limit the output of a given PID object with
		 * configClosedLoopPeakOutput().
		 */
		_leftConfig.peakOutputForward = +1.0;
		_leftConfig.peakOutputReverse = -1.0;
		_rightConfig.peakOutputForward = +1.0;
		_rightConfig.peakOutputReverse = -1.0;

		/* FPID Gains for distance servo */
		_rightConfig.slot0.kP = kGains_Distanc.kP;
		_rightConfig.slot0.kI = kGains_Distanc.kI;
		_rightConfig.slot0.kD = kGains_Distanc.kD;
		_rightConfig.slot0.kF = kGains_Distanc.kF;
		_rightConfig.slot0.integralZone = kGains_Distanc.kIzone;
		_rightConfig.slot0.closedLoopPeakOutput = kGains_Distanc.kPeakOutput;
		_rightConfig.slot0.allowableClosedloopError = 0;

		/* FPID Gains for turn servo */
		_rightConfig.slot1.kP = kGains_Secondary.kP;
		_rightConfig.slot1.kI = kGains_Secondary.kI;
		_rightConfig.slot1.kD = kGains_Secondary.kD;
		_rightConfig.slot1.kF = kGains_Secondary.kF;
		_rightConfig.slot1.integralZone = kGains_Secondary.kIzone;
		_rightConfig.slot1.closedLoopPeakOutput = kGains_Secondary.kPeakOutput;
		_rightConfig.slot1.allowableClosedloopError = 0;

		/**
		 * 1ms per loop. PID loop can be slowed down if need be.
		 * For example,
		 * - if sensor updates are too slow
		 * - sensor deltas are very small per update, so derivative error never gets
		 * large enough to be useful.
		 * - sensor movement is very slow causing the derivative error to be near zero.
		 */
		int closedLoopTimeMs = 1;
		_rightConfig.slot0.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot1.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot2.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot3.closedLoopPeriod = closedLoopTimeMs;

		_left1.configAllSettings(_leftConfig);
		_right1.configAllSettings(_rightConfig);

		// set invert
		_left1.setInverted(_leftInvert);
		_left2.setInverted(InvertType.FollowMaster);

		_right1.setInverted(_rightInvert);
		_right2.setInverted(InvertType.FollowMaster);

		/* Set status frame periods to ensure we don't have stale data */
		_right1.setStatusFramePeriod(StatusFrame.Status_12_Feedback1, 20, Constants.kTimeoutMs);
		_right1.setStatusFramePeriod(StatusFrame.Status_13_Base_PIDF0, 20, Constants.kTimeoutMs);
		_right1.setStatusFramePeriod(StatusFrame.Status_14_Turn_PIDF1, 20, Constants.kTimeoutMs);
		_right1.setStatusFramePeriod(StatusFrame.Status_10_Targets, 20, Constants.kTimeoutMs);
		_left1.setStatusFramePeriod(StatusFrame.Status_2_Feedback0, 5, Constants.kTimeoutMs);

		_right1.setStatusFramePeriod(StatusFrameEnhanced.Status_10_Targets, 10);

		_right1.selectProfileSlot(0, 0);
		_right1.selectProfileSlot(1, 1);

		zeroSensors();

	}

	@Override
	public void periodic() {
		// This method will be called once per scheduler run

	}

	@Override
	public void simulationPeriodic() {
		// This method will be called once per scheduler run when in simulation

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	// direct control of drivetrain with no squares
	public void rawDrive(double leftSpeed, double rightSpeed) {
		_right1.set(TalonFXControlMode.PercentOutput, rightSpeed);
		_left1.set(TalonFXControlMode.PercentOutput, leftSpeed);
	}

	// arcade version of driving
	public void arcadeDrive(double forward, double turn) {
		forward = forward * Math.abs(forward);
		turn = turn * Math.abs(turn);

		_right1.set(TalonFXControlMode.PercentOutput, forward, DemandType.ArbitraryFeedForward, turn);
		_left1.set(TalonFXControlMode.PercentOutput, forward, DemandType.ArbitraryFeedForward, -turn);
	}

	public void setTurnMotionSpeeds(){
		_right1.configMotionAcceleration(7000);
		_right1.configMotionCruiseVelocity(7500);
		_right1.configMotionSCurveStrength(5);

		_right1.config_kP(Constants.kSlotIdx, SmartDashboard.getNumber("T P", kGains_Turns.kP));
		_right1.config_kI(Constants.kSlotIdx, SmartDashboard.getNumber("T I", kGains_Turns.kI));
		_right1.config_kD(Constants.kSlotIdx, SmartDashboard.getNumber("T D", kGains_Turns.kD));
		_right1.config_kF(Constants.kSlotIdx, SmartDashboard.getNumber("T F", kGains_Turns.kF));
	}

	public void setStraightMotionSpeeds(){
		_right1.configMotionAcceleration(10000);
		_right1.configMotionCruiseVelocity(7000);
		_right1.configMotionSCurveStrength(4);

		_right1.config_kP(Constants.kSlotIdx, SmartDashboard.getNumber("S P", kGains_Turns.kP));
		_right1.config_kI(Constants.kSlotIdx, SmartDashboard.getNumber("S I", kGains_Turns.kI));
		_right1.config_kD(Constants.kSlotIdx, SmartDashboard.getNumber("S D", kGains_Turns.kD));
		_right1.config_kF(Constants.kSlotIdx, SmartDashboard.getNumber("S F", kGains_Turns.kF));
	}

	/*
	 * Uses MM and an Aux PID to keep the bot straight while moving foreward.
	 * Currently I am also setting the AuxPID target value to something to get a
	 * specific turn angle
	 */

	public void straightDrive(double target_sensorUnits) {
		_right1.set(TalonFXControlMode.MotionMagic, -target_sensorUnits, DemandType.AuxPID, 0);
		_left1.follow(_right1, FollowerType.AuxOutput1);

		if (SmartDashboard.getBoolean("Drivetrain Debug", Constants.DRIVETRAIN_DEBUG)) {
			_talonString.append("Target Units ");
			_talonString.append(target_sensorUnits);
			_talonString.append(" Output% ");
			_talonString.append(_right1.getMotorOutputPercent());
			_talonString.append(" Velocity ");
			_talonString.append(_right1.getSelectedSensorVelocity(Constants.kPIDLoopIdx));
			_talonString.append(" Error ");
			_talonString.append(_right1.getClosedLoopError(Constants.kPIDLoopIdx));
			_talonString.append(" Error 1 ");
			_talonString.append(_right1.getClosedLoopError(1));

			System.out.println(_talonString.toString());
			_talonString.setLength(0);
		}

	}

	public void setLeftInvert(boolean isInverted){
		_left1.setInverted(isInverted);
	}


	public double getAverageDistance() {
		return (_right1.getSelectedSensorPosition(0) + _left1.getSelectedSensorPosition(0)) / 2;
	}

	public double getTurn() {
		return _right1.getSelectedSensorPosition(1);
	}

	public void zeroSensors() {
		_left1.getSensorCollection().setIntegratedSensorPosition(0, Constants.kTimeoutMs);
		_right1.getSensorCollection().setIntegratedSensorPosition(0, Constants.kTimeoutMs);
		System.out.println("[Integrated Sensors] All sensors are zeroed.\n");
	}

	/*
	 * uses a more complex curve to allow for more control when turning
	 * 
	 */
	public void advDrive(double leftSpeed, double rightSpeed) {
		// square values and keep the sign
		// leftSpeed = leftSpeed * Math.abs(leftSpeed);
		// rightSpeed = rightSpeed * Math.abs(rightSpeed);

		leftSpeed = 0.5 * leftSpeed + 0.5 * Math.pow(leftSpeed, 3);
		rightSpeed = 0.5 * rightSpeed + 0.5 * Math.pow(rightSpeed, 3);

		// apply deadband
		leftSpeed = applyDeadband(leftSpeed, Constants.DRIVE_DEADBAND);
		rightSpeed = applyDeadband(rightSpeed, Constants.DRIVE_DEADBAND);

		// only apply the curve to the lower value
		if (Math.abs(leftSpeed) > Math.abs(rightSpeed)) {
			rightSpeed = curve(leftSpeed, rightSpeed);
		} else {
			leftSpeed = curve(rightSpeed, leftSpeed);
		}

		// set the masters on either side to the correct speed
		_right1.set(TalonFXControlMode.PercentOutput, rightSpeed);
		_left1.set(TalonFXControlMode.PercentOutput, leftSpeed);
	}

	/*
	 * complex curve for better drivetrain control. This only changes the small
	 * value - required to square joystick values before
	 * 
	 * Use desmos to see the graphs of the curve, y2 is moveable max output.
	 * 
	 * y_{1}\ =y_{2}\ -\ y_{2}\left(\frac{1}{y_{2}}\left(y_{2}\
	 * -y_{3}\right)\right)^{4}\ \left\{-1<\ x<0\right\}
	 * 
	 * y_{2}=1
	 * 
	 * y_{3}=y_{6}x^{2}\ \left\{-1\ <x<0\right\}
	 * 
	 * y_{4}=-y_{6}x^{2}\ \left\{0<x<1\right\}
	 * 
	 * y_{5}=-y_{6}x
	 * 
	 * y_{6}=\operatorname{signum}\left(y_{2}\right)
	 * 
	 * y=y_{2}
	 */
	public double curve(double largeValue, double smallValue) {
		double output;

		// check if pos or neg
		double signLarge = Math.signum(largeValue);
		double signSmall = Math.signum(smallValue);

		// if on the same side or opposite the output curve changes, complex one or just
		// squaring
		if (signLarge == signSmall) {
			output = largeValue - largeValue * Math.pow(((1 / largeValue) * (largeValue - smallValue)), 3);
		}
		// opposite side just outputs the original value.
		else {
			output = smallValue;
		}

		return output;

	}

	public double applyDeadband(double number, double deadband) {
		if (Math.abs(number) < deadband)
			return 0;
		else
			return number;
	}




	/**
	 * Determines if SensorSum or SensorDiff should be used
	 * for combining left/right sensors into Robot Distance.
	 * 
	 * Assumes Aux Position is set as Remote Sensor 0.
	 * 
	 * configAllSettings must still be called on the master config
	 * after this function modifies the config values.
	 * 
	 * @param masterInvertType Invert of the Master Talon
	 * @param masterConfig     Configuration object to fill
	 */
	void setRobotDistanceConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/**
		 * Determine if we need a Sum or Difference.
		 * 
		 * The auxiliary Talon FX will always be positive
		 * in the forward direction because it's a selected sensor
		 * over the CAN bus.
		 * 
		 * The master's native integrated sensor may not always be positive when forward
		 * because
		 * sensor phase is only applied to *Selected Sensors*, not native
		 * sensor sources. And we need the native to be combined with the
		 * aux (other side's) distance into a single robot distance.
		 */

		/*
		 * THIS FUNCTION should not need to be modified.
		 * This setup will work regardless of whether the master
		 * is on the Right or Left side since it only deals with
		 * distance magnitude.
		 */

		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			/*
			 * If master is inverted, that means the integrated sensor
			 * will be negative in the forward direction.
			 * 
			 * If master is inverted, the final sum/diff result will also be inverted.
			 * This is how Talon FX corrects the sensor phase when inverting
			 * the motor direction. This inversion applies to the *Selected Sensor*,
			 * not the native value.
			 * 
			 * Will a sensor sum or difference give us a positive total magnitude?
			 * 
			 * Remember the Master is one side of your drivetrain distance and
			 * Auxiliary is the other side's distance.
			 * 
			 * Phase | Term 0 | Term 1 | Result
			 * Sum: -((-)Master + (+)Aux )| NOT OK, will cancel each other out
			 * Diff: -((-)Master - (+)Aux )| OK - This is what we want, magnitude will be
			 * correct and positive.
			 * Diff: -((+)Aux - (-)Master)| NOT OK, magnitude will be correct but negative
			 */

			masterConfig.diff0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference.toFeedbackDevice(); // Diff0
																														// -
																														// Diff1
		} else {
			/* Master is not inverted, both sides are positive so we can sum them. */
			masterConfig.sum0Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local IntegratedSensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1
		}

		/*
		 * Since the Distance is the sum of the two sides, divide by 2 so the total
		 * isn't double
		 * the real-world value
		 */
		masterConfig.primaryPID.selectedFeedbackCoefficient = 0.5;
	}

	/**
	 * Determines if SensorSum or SensorDiff should be used
	 * for combining left/right sensors into Robot Distance.
	 * 
	 * Assumes Aux Position is set as Remote Sensor 0.
	 * 
	 * configAllSettings must still be called on the master config
	 * after this function modifies the config values.
	 * 
	 * @param masterInvertType Invert of the Master Talon
	 * @param masterConfig     Configuration object to fill
	 */
	void setRobotTurnConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/**
		 * Determine if we need a Sum or Difference.
		 * 
		 * The auxiliary Talon FX will always be positive
		 * in the forward direction because it's a selected sensor
		 * over the CAN bus.
		 * 
		 * The master's native integrated sensor may not always be positive when forward
		 * because
		 * sensor phase is only applied to *Selected Sensors*, not native
		 * sensor sources. And we need the native to be combined with the
		 * aux (other side's) distance into a single robot heading.
		 */

		/*
		 * THIS FUNCTION should not need to be modified.
		 * This setup will work regardless of whether the master
		 * is on the Right or Left side since it only deals with
		 * heading magnitude.
		 */

		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			/*
			 * If master is inverted, that means the integrated sensor
			 * will be negative in the forward direction.
			 * 
			 * If master is inverted, the final sum/diff result will also be inverted.
			 * This is how Talon FX corrects the sensor phase when inverting
			 * the motor direction. This inversion applies to the *Selected Sensor*,
			 * not the native value.
			 * 
			 * Will a sensor sum or difference give us a positive heading?
			 * 
			 * Remember the Master is one side of your drivetrain distance and
			 * Auxiliary is the other side's distance.
			 * 
			 * Phase | Term 0 | Term 1 | Result
			 * Sum: -((-)Master + (+)Aux )| OK - magnitude will cancel each other out
			 * Diff: -((-)Master - (+)Aux )| NOT OK - magnitude increases with forward
			 * distance.
			 * Diff: -((+)Aux - (-)Master)| NOT OK - magnitude decreases with forward
			 * distance
			 */

			masterConfig.sum0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1

			/*
			 * PID Polarity
			 * 
			 * With the sensor phasing taken care of, we now need to determine if the PID
			 * polarity is in the correct direction
			 * This is important because if the PID polarity is incorrect, we will run away
			 * while trying to correct
			 * 
			 * Will inverting the polarity give us a positive counterclockwise heading?
			 * 
			 * If we're moving counterclockwise(+), and the master is on the right side and
			 * inverted,
			 * it will have a negative velocity and the auxiliary will have a negative
			 * velocity
			 * heading = right + left
			 * heading = (-) + (-)
			 * heading = (-)
			 * Let's assume a setpoint of 0 heading.
			 * This produces a positive error, in order to cancel the error, the right
			 * master needs to
			 * drive backwards. This means the PID polarity needs to be inverted to handle
			 * this
			 * 
			 * Conversely, if we're moving counterclwise(+), and the master is on the left
			 * side and inverted,
			 * it will have a positive velocity and the auxiliary will have a positive
			 * velocity.
			 * heading = right + left
			 * heading = (+) + (+)
			 * heading = (+)
			 * Let's assume a setpoint of 0 heading.
			 * This produces a negative error, in order to cancel the error, the left master
			 * needs to
			 * drive forwards. This means the PID polarity needs to be inverted to handle
			 * this
			 */
			masterConfig.auxPIDPolarity = true;
		} else {
			/* Master is not inverted, both sides are positive so we can diff them. */
			masterConfig.diff0Term = TalonFXFeedbackDevice.RemoteSensor1.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local
																								// IntegratedSensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference.toFeedbackDevice(); // Sum0 + Sum1
			/*
			 * With current diff terms, a counterclockwise rotation results in negative
			 * heading with a right master
			 */
			masterConfig.auxPIDPolarity = true;
		}
		/**
		 * Heading units should be scaled to ~4000 per 360 deg, due to the following
		 * limitations...
		 * - Target param for aux PID1 is 18bits with a range of [-131072,+131072]
		 * units.
		 * - Target for aux PID1 in motion profile is 14bits with a range of
		 * [-8192,+8192] units.
		 * ... so at 3600 units per 360', that ensures 0.1 degree precision in firmware
		 * closed-loop
		 * and motion profile trajectory points can range +-2 rotations.
		 */
		masterConfig.auxiliaryPID.selectedFeedbackCoefficient = 1;
	}

}
