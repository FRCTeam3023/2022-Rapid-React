// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands.IntakeShooter;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.subsystems.IntakeShooter;

/**
 *
 */
public class IntakeCargo extends CommandBase {

        private final IntakeShooter m_intake;

        private double intakeSpeed;
        private double innerIntakeSpeed;


    public IntakeCargo(IntakeShooter m_intakeShooter) {
        m_intake = m_intakeShooter;
        addRequirements(m_intake);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        intakeSpeed = SmartDashboard.getNumber("Intake Speed", Constants.INTAKE_SPEED);
        innerIntakeSpeed = SmartDashboard.getNumber("Conveyor Speed", Constants.CONVEYOR_SPEED);


        if(!m_intake.getBallLimit()){
            m_intake.intakeInner(innerIntakeSpeed);
            m_intake.intakeOuter(intakeSpeed);
        }
        else{
            m_intake.intakeInner(0);
            m_intake.intakeOuter(intakeSpeed);
        }
        
        

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_intake.intakeInner(0);
        m_intake.intakeOuter(0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
       
        return false;

    }
}
